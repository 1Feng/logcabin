Import('env')

env.SharedObject("#build/test/gtest-all.o",
                 "#gtest/src/gtest-all.cc",
                 CPPPATH = [ "#gtest", "#gtest/include" ],
                 CPPFLAGS = [ "-g", "-DDEBUG" ],
                 CXXFLAGS = "-std=c++0x")
env.StaticLibrary("#build/test/gtest",
                 ["gtest-all.o"],
                 CPPPATH = [ "#gtest", "#gtest/include" ],
                 CPPFLAGS = [ "-g", "-DDEBUG" ],
                 CXXFLAGS = "-std=c++0x")

def SrcToVariant(srcs, variant_dir):
    """Find the corresponding paths to source files in a variant directory."""

    root = str(Dir('#'))
    variant_dir = str(Dir(variant_dir))
    return [str(src).replace(root, variant_dir) for src in srcs]

def GetTestFiles(src_dirs, variant_dir):
    """Find the test files to build in the given source directories.

    Given a list of source directories, return a list of strings naming the
    source copies to be placed in variant_dir of files ending in Test.cc that
    are directly contained in those directories.
    """
    return Flatten([SrcToVariant(Glob("%s/*Test.cc" % src_dir),
                                 variant_dir=variant_dir)
                    for src_dir in src_dirs])

env.Program("test",
            [
              "TestRunner.cc",
              "dlogd/AsyncMutex.cc",
              "dlogd/LogManager.cc",
              "include/CommonTest.cc",
              "include/RefTest.cc",
              "libDLogRPC/Checksum.cc",
              "libDLogRPC/Config.cc",
              "libDLogRPC/EventSignal.cc",
              "libDLogRPC/EventTimer.cc",
              "libDLogRPC/ProtoBuf.cc",
              "libDLogStorage/DLogStorage.cc",
              "libDLogStorage/DumbFilesystemStorageModule.cc",
              "libDLogStorage/FilesystemStorageModule.cc",
              "libDLogStorage/FilesystemUtil.cc",
              "libDLogStorage/MemoryStorageModule.cc",
              "libDLogStorage/WorkDispatcher.cc",
              "#build/dlogd/AsyncMutex.o",
              "#build/dlogd/InternalLog.pb.o",
              "#build/dlogd/LogManager.o",
              "#build/libDLogRPC/Common.o",
              "#build/libDLogRPC/Checksum.o",
              "#build/libDLogRPC/Config.o",
              "#build/libDLogRPC/Debug.o",
              "#build/libDLogRPC/DLogEvent.o",
              "#build/libDLogRPC/DLogEventLE2.o",
              "#build/libDLogRPC/ProtoBuf.o",
              "#build/libDLogStorage/DLogStorage.o",
              "#build/libDLogStorage/DumbFilesystem.pb.o",
              "#build/libDLogStorage/DumbFilesystemStorageModule.o",
              "#build/libDLogStorage/FilesystemStorageModule.o",
              "#build/libDLogStorage/FilesystemUtil.o",
              "#build/libDLogStorage/MemoryStorageModule.o",
              "#build/libDLogStorage/WorkDispatcher.o",
              "#build/proto/dlog.pb.o",
              "#build/test/libDLogRPC/ProtoBuf.pb.o",
            ] +
            GetTestFiles([
                "#Core",
                "#Event",
                "#RPC",
                "#Client",
            ], variant_dir='#build'),
            LIBPATH = [
                "#build/test",
                "#build/Client",
                "#build/RPC",
                "#build/Event",
                "#build/Core",
            ],
            LIBS = [
                     "libLogCabinClient",
                     "libLogCabinRPC",
                     "libLogCabinEvent",
                     "libLogCabinCore",
                     "gtest", "pthread", "protobuf", "rt", "cryptopp",
                     "event_core-2.0", "event_pthreads-2.0" ],
            CPPPATH = ["#", "#include", "#gtest/include"],
            # -fno-access-control allows tests to access private members
            CXXFLAGS = env["CXXFLAGS"] + ["-fno-access-control"])

env.Protoc([],
           "libDLogRPC/ProtoBuf.proto",
           PROTOCPROTOPATH = ['.'],
           PROTOCPYTHONOUTDIR = None,
           PROTOCOUTDIR = '.')

env.StaticObject("#build/test/libDLogRPC/ProtoBuf.pb.o",
                 "#build/test/libDLogRPC/ProtoBuf.pb.cc",
                 CPPPATH = "#",
                 CXXFLAGS = "-std=c++0x")
