// Copyright (c) 2011-2012 Stanford University
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR(S) DISCLAIM ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL AUTHORS BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

package LogCabin.Protocol.Client;

/**
 * \file
 * This file contains the formats for RPCs between clients and servers.
 */

/**
 * Identifies which RPC is being executed.
 */
enum OpCode {
    // Keep these numbers dense.
    GET_SUPPORTED_RPC_VERSIONS = 0;
    OPEN_SESSION = 9;
    OPEN_LOG    = 1;
    DELETE_LOG  = 2;
    LIST_LOGS   = 3;
    APPEND      = 4;
    READ        = 5;
    GET_LAST_ID = 6;
    GET_CONFIGURATION = 7;
    SET_CONFIGURATION = 8;
    READ_ONLY_TREE = 10;
    READ_WRITE_TREE = 11;
};

/**
 * The type of "service-specific error" replies that this service returns.
 */
message Error {
    enum Code {
        /**
         * The server is not the current cluster leader. The client should look
         * elsewhere for the cluster leader. The server MAY provide a hint as
         * to who the leader is (see leader_hint field).
         */
        NOT_LEADER = 1;
        /**
         * This session is no longer valid. Its state has been discarded on the
         * server. The client should treat this as a fatal error.
         */
        SESSION_EXPIRED = 2;
    };
    required Code error_code = 1;
    /**
     * If error_code is NOT_LEADER and this field is set, the client should try
     * the server found at this address, which is likely to be the current
     * leader.
     */
    optional string leader_hint = 2;
}

/**
 * This is included in some RPCs to prevent processing of duplicated RPCs.
 */
message ExactlyOnceRPCInfo {
    /**
     * A session ID returned from the OpenSession RPC.
     */
    required uint64 client_id = 1;
    /**
     * The lowest numbered RPC for which the client has not yet received a
     * response. The server may discard all copies of responses for RPCs with
     * smaller numbers.
     */
    required uint64 first_outstanding_rpc = 2;
    /**
     * A strictly increasing sequence number for the RPC.
     */
    required uint64 rpc_number = 3;
}

/**
 * GetSupportedRPCVersions RPC: Find out the range of RPC protocol versions the
 * cluster supports. This should be the first RPC sent by the client.
 */
message GetSupportedRPCVersions {
    message Request {
    }
    message Response {
        /**
         * The minimum RPC protocol version this cluster will accept.
         */
        required uint32 min_version = 1;
        /**
         * The maximum RPC protocol version this cluster will accept.
         */
        required uint32 max_version = 2;
    }
}

/**
 * OpenSession RPC: Open a new session with the cluster. Sessions are necessary
 * for some RPCs to provide exactly-once semantics.
 */
message OpenSession {
    message Request {
    }
    message Response {
        /**
         * The ID assigned to the client.
         */
        required uint64 client_id = 1;
    }
}

/**
 * OpenLog RPC: Open or create a log by its name.
 */
message OpenLog {
    message Request {
        /// See ExactlyOnceRPCInfo.
        required ExactlyOnceRPCInfo exactly_once = 10;
        /**
         * The name of the log, which may or may not exist.
         */
        required string log_name = 1;
    }
    message Response {
        /**
         * The ID of the newly created or existing log.
         */
        required uint64 log_id = 1;
    }
}

/**
 * DeleteLog RPC: Delete a log by its name.
 */
message DeleteLog {
    message Request {
        /// See ExactlyOnceRPCInfo.
        required ExactlyOnceRPCInfo exactly_once = 10;
        /**
         * The name of the log, which may or may not exist.
         */
        required string log_name = 1;
    }

    message Response {
    }
}

/**
 * ListLogs RPC: List all available logs.
 */
message ListLogs {
    message Request {
    }

    message Response {
        /**
         * The name of every known log, in no particular order.
         */
        repeated string log_names = 1;
    }
}

/**
 * Append RPC: Append data and/or invalidate a previous append.
 */
message Append {
    message Request {
        /// See ExactlyOnceRPCInfo.
        required ExactlyOnceRPCInfo exactly_once = 10;
        /**
         * The ID for the log to extend.
         */
        required uint64 log_id = 1;
        /**
         * If set, the operation will only proceed if the appended entry is
         * assigned this entry ID. This may be left unset or set to NO_ENTRY_ID
         * to unconditionally append.
         */
        optional uint64 expected_entry_id = 2;
        /**
         * A list of entry IDs that are no longer needed.
         */
        repeated uint64 invalidates = 3;
        /**
         * If set, the data stored in this entry.
         */
        optional bytes data = 4;
    }
    message Response {
        // The following are mutually exclusive.
        message OK {
            /**
             * Set to the ID of the newly appended entry, or NO_ENTRY_ID if the
             * operation was rejected due to previous_entry_id being stale.
             */
            required uint64 entry_id = 1;
        }
        message LogDisappeared {
        }
        /**
         * Set if the operation succeeded or was rejected due to
         * previous_entry_id.
         */
        optional OK ok = 1;
        /**
         * Set if the log with the given ID does not exist.
         */
        optional LogDisappeared log_disappeared = 2;
    }
}

/**
 * Read RPC: Fetch a suffix of a log.
 */
message Read {
    message Request {
        required uint64 log_id = 1;
        required uint64 from_entry_id = 2;
    }

    message Response {
        // The following are mutually exclusive.
        message OK {
            message Entry {
                /**
                 * The ID of the entry.
                 */
                required uint64 entry_id = 1;
                /**
                 * A list of previous entries that this entry invalidates.
                 */
                repeated uint64 invalidates = 2;
                /**
                 * The data associated with this entry, if any.
                 */
                optional bytes data = 3;
            }
            /**
             * The entries in the log starting at the given from_entry_id,
             * inclusive.
             */
            repeated Entry entry = 1;
        }
        message LogDisappeared {
        }
        /**
         * Set if the operation succeeded.
         */
        optional OK ok = 1;
        /**
         * Set if the log with the given ID does not exist.
         */
        optional LogDisappeared log_disappeared = 2;
    }
}

/**
 * GetLastId RPC: Determine the ID for the most recent entry in a log.
 */
message GetLastId {
    message Request {
        required uint64 log_id = 1;
    }
    message Response {
        // The following are mutually exclusive.
        message OK {
            /**
             * Set to the ID of the head of the log, or NO_ENTRY_ID if the
             * log is empty.
             */
            required uint64 head_entry_id = 1;
        }
        message LogDisappeared {
        }
        /**
         * Set if the operation succeeded.
         */
        optional OK ok = 1;
        /**
         * Set if the log with the given ID does not exist.
         */
        optional LogDisappeared log_disappeared = 2;
    }
}

/**
 * A server in a configuration. Used in the GetConfiguration and
 * SetConfiguration RPCs.
 */
message Server {
    /**
     * The ID of the server.
     */
    required uint64 server_id = 1;
    /**
     * The network address of the server.
     */
    required string address = 2;
}

/**
 * GetConfiguration RPC: Get the current cluster configuration.
 * This will only return stable configurations; the client will be asked to
 * retry otherwise.
 */
message GetConfiguration {
    message Request {
    }
    message Response {
        /**
         * Identifies the configuration. Pass this to SetConfiguration later.
         */
        required uint64 id = 1;
        /**
         * The list of servers in the configuration.
         */
        repeated Server servers = 2;
    }
}

/**
 * SetConfiguration RPC: Change the cluster's configuration.
 */
message SetConfiguration {
    message Request {
        /**
         * The ID of the cluster's current configuration.
         */
        required uint64 old_id = 1;
        /**
         * The list of servers in the new configuration.
         */
        repeated Server new_servers = 2;
    }
    message Response {
        // The following are mutually exclusive.
        message OK {
        }
        message ConfigurationChanged {
        }
        message ConfigurationBad {
            /**
             * The servers that were unavailable to join the cluster.
             */
            repeated Server bad_servers = 1;
        }
        /**
         * Set if the operation succeeded.
         */
        optional OK ok = 1;
        /**
         * Set if the supplied 'old_id' is no longer current.
         * Call GetConfiguration, re-apply your changes, and try again.
         */
        optional ConfigurationChanged configuration_changed = 2;
        /**
         * Set if the reconfiguration was aborted because some servers are
         * unavailable.
         */
        optional ConfigurationBad configuration_bad = 3;
    }
}

/**
 * The status code returned from Tree operations.
 * For now, this should be the exact same as Client::Status and Tree::Status.
 */
enum Status {
    OK = 0;
    INVALID_ARGUMENT = 1;
    LOOKUP_ERROR = 2;
    TYPE_ERROR = 3;
};

/**
 * Read-only Tree RPC: An RPC to query the hierarchical key-value store.
 */
message ReadOnlyTree {
    message Request {
        // The following are mutually exclusive.
        message ListDirectory {
            required string path = 1;
        }
        optional ListDirectory list_directory = 2;
        message Read {
            required string path = 1;
        }
        optional Read read = 5;
    }
    message Response {
        required Status status = 1;
        // The following are mutually exclusive.
        optional string error = 2;
        message ListDirectory {
            repeated string child = 1;
        }
        optional ListDirectory list_directory = 3;
        message Read {
            required bytes contents = 1;
        }
        optional Read read = 4;
    }
}

/**
 * Read-write Tree RPC: An RPC that may modify the hierarchical key-value store.
 */
message ReadWriteTree {
    message Request {
        /// See ExactlyOnceRPCInfo.
        required ExactlyOnceRPCInfo exactly_once = 10;
        // The following are mutually exclusive.
        message MakeDirectory {
            required string path = 1;
        }
        optional MakeDirectory make_directory = 1;
        message RemoveDirectory {
            required string path = 1;
        }
        optional RemoveDirectory remove_directory = 3;
        message Write {
            required string path = 1;
            required bytes contents = 2;
        }
        optional Write write = 4;
        message RemoveFile {
            required string path = 1;
        }
        optional RemoveFile remove_file = 6;

    }
    message Response {
        required Status status = 1;
        // The following are mutually exclusive.
        optional string error = 2;
    }
}


/**
 * This is what the state machine takes in from the replicated log.
 */
message Command {
    // The following are mutually exclusive.
    optional OpenSession.Request open_session = 4;
    optional OpenLog.Request open_log = 1;
    optional DeleteLog.Request delete_log = 2;
    optional Append.Request append = 3;
    optional ReadWriteTree.Request tree = 5;
}

/**
 * This is what the state machine outputs.
 */
message CommandResponse {
    // The following are mutually exclusive.
    optional OpenSession.Response open_session = 4;
    optional OpenLog.Response open_log = 1;
    optional DeleteLog.Response delete_log = 2;
    optional Append.Response append = 3;
    optional ReadWriteTree.Response tree = 5;
}
